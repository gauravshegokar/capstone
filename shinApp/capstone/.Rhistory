print("bigrams are")
print(head(bPred))
bPred$fscore <- 0.4 * 0.4 * bPred$prob
bPred <- filter(bPred, !nextword %in% pred$nextword)
pred <- rbind(pred, bPred)
pred <- arrange(pred, desc(fscore))
if(nrow(pred) >=3){
pred <- pred[1:3,c("nextword", "fscore")]
print("got predictions with bigrams returning")
return(pred)
}
}
if(exists("pred") && nrow(pred) > 0){
print("case: insert unigrams")
print("unigrams are")
head(dfUni)
predV <- as.vector(pred$nextword)
predU <- as.vector(head(dfUni$word,3))
print("got unigrams returning")
return(c(predV,predU)[1:3])
}
print("no match found suggesting unigrams only")
dfUni$word[1:3]
}
predictNextWord("hello")
predictNextWord <- function(phrase){
tokens <- getLastTokens(phrase,3)
if(length(tokens) == 3){
qPred <- getPredictionFromNgram(tokens,dfQuad)
}
tokens <- getLastTokens(phrase,2)
if(length(tokens) == 2){
tPred <- getPredictionFromNgram(tokens,dfTri)
}
tokens <- getLastTokens(phrase,1)
if(length(tokens) == 1){
bPred <- getPredictionFromNgram(tokens, dfBi)
}
pred <- data.frame(nextword = character(), fscore = numeric())
if(exists("qPred") && nrow(qPred) > 0){
qPred$fscore <- qPred$prob
if(nrow(qPred) >=3){
pred <- qPred[1:3,c("nextword", "fscore")]
return(pred$nextword)
}else{
pred <- qPred
}
}
if(exists("tPred") && nrow(tPred) > 0){
tPred$fscore <- 0.4 * tPred$prob
tPred <- filter(tPred, !nextword %in% pred$nextword)
pred <- rbind(pred, tPred)
pred <- arrange(pred, desc(fscore))
if(nrow(pred) >=3){
pred <- pred[1:3,c("nextword", "fscore")]
return(pred$nextword)
}
}
if(exists("bPred")&& nrow(bPred) > 0){
bPred$fscore <- 0.4 * 0.4 * bPred$prob
bPred <- filter(bPred, !nextword %in% pred$nextword)
pred <- rbind(pred, bPred)
pred <- arrange(pred, desc(fscore))
if(nrow(pred) >=3){
pred <- pred[1:3,c("nextword", "fscore")]
return(pred$nextword)
}
}
if(exists("pred") && nrow(pred) > 0){
predV <- as.vector(pred$nextword)
predU <- as.vector(head(dfUni$word,3))
return(c(predV,predU)[1:3])
}
dfUni$word[1:3]
}
predictNextWord("hello")
runApp()
predictNextWord <- function(phrase){
tokens <- getLastTokens(phrase,3)
if(length(tokens) == 3){
print("qPred")
qPred <- getPredictionFromNgram(tokens,dfQuad)
print(head(qPred))
}
tokens <- getLastTokens(phrase,2)
if(length(tokens) == 2){
print("tPred")
tPred <- getPredictionFromNgram(tokens,dfTri)
print(head(tPred))
}
tokens <- getLastTokens(phrase,1)
if(length(tokens) == 1){
print("bPred")
bPred <- getPredictionFromNgram(tokens, dfBi)
print(head(bPred))
}
pred <- data.frame(nextword = character(), fscore = numeric())
if(exists("qPred") && nrow(qPred) > 0){
print("case: insert Quadgrams")
print("Quadgrams are")
print(head(qPred,10))
qPred$fscore <- qPred$prob
if(nrow(qPred) >=3){
pred <- qPred[1:3,c("nextword", "fscore")]
print("got predictions with trigrams returning")
return(pred)
}else{
pred <- qPred
}
}
if(exists("tPred") && nrow(tPred) > 0){
print("case: insert trigrams")
print("trigrams are")
print(head(tPred))
tPred$fscore <- 0.4 * tPred$prob
tPred <- filter(tPred, !nextword %in% pred$nextword)
pred <- rbind(pred, tPred)
pred <- arrange(pred, desc(fscore))
if(nrow(pred) >=3){
pred <- pred[1:3,c("nextword", "fscore")]
print("got predictions with trigrams returning")
return(pred)
}
}
if(exists("bPred")&& nrow(bPred) > 0){
print("case: insert bigrams")
print("bigrams are")
print(head(bPred))
bPred$fscore <- 0.4 * 0.4 * bPred$prob
bPred <- filter(bPred, !nextword %in% pred$nextword)
pred <- rbind(pred, bPred)
pred <- arrange(pred, desc(fscore))
if(nrow(pred) >=3){
pred <- pred[1:3,c("nextword", "fscore")]
print("got predictions with bigrams returning")
return(pred)
}
}
if(exists("pred") && nrow(pred) > 0){
print("case: insert unigrams")
print("unigrams are")
head(dfUni)
predV <- as.vector(pred$nextword)
predU <- as.vector(head(dfUni$word,3))
print("got unigrams returning")
return(c(predV,predU)[1:3])
}
print("no match found suggesting unigrams only")
dfUni$word[1:3]
}
predictNextWord <- function(phrase){
tokens <- getLastTokens(phrase,3)
if(length(tokens) == 3){
print("qPred")
qPred <- getPredictionFromNgram(tokens,dfQuad)
print(head(qPred))
}
tokens <- getLastTokens(phrase,2)
if(length(tokens) == 2){
print("tPred")
tPred <- getPredictionFromNgram(tokens,dfTri)
print(head(tPred))
}
tokens <- getLastTokens(phrase,1)
if(length(tokens) == 1){
print("bPred")
bPred <- getPredictionFromNgram(tokens, dfBi)
print(head(bPred))
}
pred <- data.frame(nextword = character(), fscore = numeric())
if(exists("qPred") && nrow(qPred) > 0){
print("case: insert Quadgrams")
print("Quadgrams are")
print(head(qPred,10))
qPred$fscore <- qPred$prob
if(nrow(qPred) >=3){
pred <- qPred[1:3,c("nextword", "fscore")]
print("got predictions with trigrams returning")
droplevels(pred)
return(pred$nextword)
}else{
pred <- qPred
}
}
if(exists("tPred") && nrow(tPred) > 0){
print("case: insert trigrams")
print("trigrams are")
print(head(tPred))
tPred$fscore <- 0.4 * tPred$prob
tPred <- filter(tPred, !nextword %in% pred$nextword)
pred <- rbind(pred, tPred)
pred <- arrange(pred, desc(fscore))
if(nrow(pred) >=3){
pred <- pred[1:3,c("nextword", "fscore")]
print("got predictions with trigrams returning")
droplevels(pred)
return(pred$nextword)
}
}
if(exists("bPred")&& nrow(bPred) > 0){
print("case: insert bigrams")
print("bigrams are")
print(head(bPred))
bPred$fscore <- 0.4 * 0.4 * bPred$prob
bPred <- filter(bPred, !nextword %in% pred$nextword)
pred <- rbind(pred, bPred)
pred <- arrange(pred, desc(fscore))
if(nrow(pred) >=3){
pred <- pred[1:3,c("nextword", "fscore")]
print("got predictions with bigrams returning")
droplevels(pred)
return(pred$nextword)
}
}
if(exists("pred") && nrow(pred) > 0){
print("case: insert unigrams")
print("unigrams are")
head(dfUni)
predV <- as.vector(pred$nextword)
predU <- as.vector(head(dfUni$word,3))
print("got unigrams returning")
droplevels(predV)
droplevels(predU)
return(c(predV,predU)[1:3])
}
print("no match found suggesting unigrams only")
droplevels(dfUni$word[1:3])
}
predictNextWord("")
predictNextWord("asdsa")
predictNextWord <- function(phrase){
tokens <- getLastTokens(phrase,3)
if(length(tokens) == 3){
qPred <- getPredictionFromNgram(tokens,dfQuad)
}
tokens <- getLastTokens(phrase,2)
if(length(tokens) == 2){
tPred <- getPredictionFromNgram(tokens,dfTri)
}
tokens <- getLastTokens(phrase,1)
if(length(tokens) == 1){
bPred <- getPredictionFromNgram(tokens, dfBi)
}
pred <- data.frame(nextword = character(), fscore = numeric())
if(exists("qPred") && nrow(qPred) > 0){
qPred$fscore <- qPred$prob
if(nrow(qPred) >=3){
pred <- qPred[1:3,c("nextword", "fscore")]
droplevels(pred)
return(pred$nextword)
}else{
pred <- qPred
}
}
if(exists("tPred") && nrow(tPred) > 0){
tPred$fscore <- 0.4 * tPred$prob
tPred <- filter(tPred, !nextword %in% pred$nextword)
pred <- rbind(pred, tPred)
pred <- arrange(pred, desc(fscore))
if(nrow(pred) >=3){
pred <- pred[1:3,c("nextword", "fscore")]
droplevels(pred)
return(pred$nextword)
}
}
if(exists("bPred")&& nrow(bPred) > 0){
bPred$fscore <- 0.4 * 0.4 * bPred$prob
bPred <- filter(bPred, !nextword %in% pred$nextword)
pred <- rbind(pred, bPred)
pred <- arrange(pred, desc(fscore))
if(nrow(pred) >=3){
pred <- pred[1:3,c("nextword", "fscore")]
droplevels(pred)
return(pred$nextword)
}
}
if(exists("pred") && nrow(pred) > 0){
predV <- as.vector(pred$nextword)
predU <- as.vector(head(dfUni$word,3))
droplevels(predV)
droplevels(predU)
return(c(predV,predU)[1:3])
}
droplevels(dfUni$word[1:3])
}
predictNextWord("asdsa")
runApp()
predictNextWord <- function(phrase){
tokens <- getLastTokens(phrase,3)
if(length(tokens) == 3){
qPred <- getPredictionFromNgram(tokens,dfQuad)
}
tokens <- getLastTokens(phrase,2)
if(length(tokens) == 2){
tPred <- getPredictionFromNgram(tokens,dfTri)
}
tokens <- getLastTokens(phrase,1)
if(length(tokens) == 1){
bPred <- getPredictionFromNgram(tokens, dfBi)
}
pred <- data.frame(nextword = character(), fscore = numeric())
if(exists("qPred") && nrow(qPred) > 0){
qPred$fscore <- qPred$prob
if(nrow(qPred) >=3){
pred <- qPred[1:3,c("nextword", "fscore")]
droplevels(pred)
return(pred$nextword)
}else{
pred <- qPred
}
}
if(exists("tPred") && nrow(tPred) > 0){
tPred$fscore <- 0.4 * tPred$prob
tPred <- filter(tPred, !nextword %in% pred$nextword)
pred <- rbind(pred, tPred)
pred <- arrange(pred, desc(fscore))
if(nrow(pred) >=3){
pred <- pred[1:3,c("nextword", "fscore")]
droplevels(pred)
return(pred$nextword)
}
}
if(exists("bPred")&& nrow(bPred) > 0){
bPred$fscore <- 0.4 * 0.4 * bPred$prob
bPred <- filter(bPred, !nextword %in% pred$nextword)
pred <- rbind(pred, bPred)
pred <- arrange(pred, desc(fscore))
if(nrow(pred) >=3){
pred <- pred[1:3,c("nextword", "fscore")]
droplevels(pred)
return(pred$nextword)
}
}
if(exists("pred") && nrow(pred) > 0){
predV <- as.vector(pred$nextword)
predU <- as.vector(head(dfUni$word,3))
droplevels(predV)
droplevels(predU)
return(c(predV,predU)[1:3])
}
droplevels(dfUni)
dfUni$word[1:3]
}
predictNextWord("asdsa")
predictNextWord <- function(phrase){
tokens <- getLastTokens(phrase,3)
if(length(tokens) == 3){
print("qPred")
qPred <- getPredictionFromNgram(tokens,dfQuad)
print(head(qPred))
}
tokens <- getLastTokens(phrase,2)
if(length(tokens) == 2){
print("tPred")
tPred <- getPredictionFromNgram(tokens,dfTri)
print(head(tPred))
}
tokens <- getLastTokens(phrase,1)
if(length(tokens) == 1){
print("bPred")
bPred <- getPredictionFromNgram(tokens, dfBi)
print(head(bPred))
}
pred <- data.frame(nextword = character(), fscore = numeric())
if(exists("qPred") && nrow(qPred) > 0){
print("case: insert Quadgrams")
print("Quadgrams are")
print(head(qPred,10))
qPred$fscore <- qPred$prob
if(nrow(qPred) >=3){
pred <- qPred[1:3,c("nextword", "fscore")]
print("got predictions with trigrams returning")
droplevels(pred)
return(pred$nextword)
}else{
pred <- qPred
}
}
if(exists("tPred") && nrow(tPred) > 0){
print("case: insert trigrams")
print("trigrams are")
print(head(tPred))
tPred$fscore <- 0.4 * tPred$prob
tPred <- filter(tPred, !nextword %in% pred$nextword)
pred <- rbind(pred, tPred)
pred <- arrange(pred, desc(fscore))
if(nrow(pred) >=3){
pred <- pred[1:3,c("nextword", "fscore")]
print("got predictions with trigrams returning")
droplevels(pred)
return(pred$nextword)
}
}
if(exists("bPred")&& nrow(bPred) > 0){
print("case: insert bigrams")
print("bigrams are")
print(head(bPred))
bPred$fscore <- 0.4 * 0.4 * bPred$prob
bPred <- filter(bPred, !nextword %in% pred$nextword)
pred <- rbind(pred, bPred)
pred <- arrange(pred, desc(fscore))
if(nrow(pred) >=3){
pred <- pred[1:3,c("nextword", "fscore")]
print("got predictions with bigrams returning")
droplevels(pred)
return(pred$nextword)
}
}
if(exists("pred") && nrow(pred) > 0){
print("case: insert unigrams")
print("unigrams are")
head(dfUni)
predV <- as.vector(pred$nextword)
predU <- as.vector(head(dfUni$word,3))
print("got unigrams returning")
droplevels(predV)
droplevels(predU)
return(c(predV,predU)[1:3])
}
print("no match found suggesting unigrams only")
droplevels(dfUni)
dfUni$word[1:3]
}
predictNextWord("asdsa")
phrase <- "asdsda"
tokens <- getLastTokens(phrase,3)
if(length(tokens) == 3){
print("qPred")
qPred <- getPredictionFromNgram(tokens,dfQuad)
print(head(qPred))
}
tokens <- getLastTokens(phrase,2)
if(length(tokens) == 2){
print("tPred")
tPred <- getPredictionFromNgram(tokens,dfTri)
print(head(tPred))
}
tokens <- getLastTokens(phrase,1)
if(length(tokens) == 1){
print("bPred")
bPred <- getPredictionFromNgram(tokens, dfBi)
print(head(bPred))
}
pred <- data.frame(nextword = character(), fscore = numeric())
if(exists("qPred") && nrow(qPred) > 0){
print("case: insert Quadgrams")
print("Quadgrams are")
print(head(qPred,10))
qPred$fscore <- qPred$prob
if(nrow(qPred) >=3){
pred <- qPred[1:3,c("nextword", "fscore")]
print("got predictions with trigrams returning")
droplevels(pred)
return(pred$nextword)
}else{
pred <- qPred
}
}
if(exists("tPred") && nrow(tPred) > 0){
print("case: insert trigrams")
print("trigrams are")
print(head(tPred))
tPred$fscore <- 0.4 * tPred$prob
tPred <- filter(tPred, !nextword %in% pred$nextword)
pred <- rbind(pred, tPred)
pred <- arrange(pred, desc(fscore))
if(nrow(pred) >=3){
pred <- pred[1:3,c("nextword", "fscore")]
print("got predictions with trigrams returning")
droplevels(pred)
return(pred$nextword)
}
}
if(exists("bPred")&& nrow(bPred) > 0){
print("case: insert bigrams")
print("bigrams are")
print(head(bPred))
bPred$fscore <- 0.4 * 0.4 * bPred$prob
bPred <- filter(bPred, !nextword %in% pred$nextword)
pred <- rbind(pred, bPred)
pred <- arrange(pred, desc(fscore))
if(nrow(pred) >=3){
pred <- pred[1:3,c("nextword", "fscore")]
print("got predictions with bigrams returning")
droplevels(pred)
return(pred$nextword)
}
}
if(exists("pred") && nrow(pred) > 0){
print("case: insert unigrams")
print("unigrams are")
head(dfUni)
predV <- as.vector(pred$nextword)
predU <- as.vector(head(dfUni$word,3))
print("got unigrams returning")
droplevels(predV)
droplevels(predU)
return(c(predV,predU)[1:3])
}
print("no match found suggesting unigrams only")
droplevels(dfUni)
head(dfUni)
dfUni$word[1:3]
runApp()
runApp()
rm(list = ls())
runApp()
rm(list = ls())
runApp()
rm(list = ls())
runApp()
rm(list = ls())
